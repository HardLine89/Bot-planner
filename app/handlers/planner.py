from aiogram.types import Message
from app.utils.database import get_session, get_or_create_user, create_task, get_tasks


async def add_task(message: Message):
    async with get_session() as session:

        user = await get_or_create_user(
            session,
            telegram_id=str(message.from_user.id),
            username=message.from_user.username,
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command_args = message.text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        if len(command_args) > 1:
            task_description = command_args[1]
        else:
            task_description = None
        if not task_description:
            await message.answer(
                "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_task."
            )
            return

        await create_task(session, user_id=user.id, description=task_description)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


async def list_tasks(message: Message):
    async with get_session() as session:
        user = await get_or_create_user(
            session,
            telegram_id=str(message.from_user.id),
            username=message.from_user.username,
        )

        tasks = await get_tasks(session, user_id=user.id)
        if not tasks:
            await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return

        tasks_list = "\n".join(
            [f"{i + 1}. {task.description}" for i, task in enumerate(tasks)]
        )
        await message.answer(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks_list}")
